directive @cacheControl(maxAge: Int, scope: CacheControlScope) on FIELD_DEFINITION | OBJECT | INTERFACE

enum CacheControlScope {
  PUBLIC
  PRIVATE
}

type Camera implements INode {
  id: ID!
  cameraId: Int
  name: String!
  location: GeoCenter!
}

type Cluster implements INode {
  id: ID!
  name: String!
  ins(from: Date!, till: Date!): Int
  outs(from: Date!, till: Date!): Int
  gates: [Gate]
}

scalar Date

enum Direction {
  IN
  OUT
}

type Gate implements INode {
  id: ID!
  ins(from: Date!, till: Date!): Int
  outs(from: Date!, till: Date!): Int
}

type GeoCenter {
  lat: Float
  lon: Float
}

interface INode {
  id: ID!
}

type Intersection implements INode {
  id: ID!
  cameraName: String
  Total: Int
  SouthCluster: Int
  NorthCluster: Int
  EastCluster: Int
  WestCluster: Int
}

type Query {
  region(regionId: Int!): Region
  regions: [Region]
  clusters: [Cluster]
}

type Region implements INode {
  id: ID!
  regionId: Int
  center: GeoCenter
  cameras: [Camera]
  name: String
  summary(from: Date!, till: Date!, kind: SummaryKind!): Summary
  summaries(from: Date!, till: Date!): [Summary!]
  dayOfWeekDisrtibution(from: Date!, till: Date!): Serie
  hourlyDistribution(date: Date!): [Serie]
  vehicleTypeDistribution(date: Date!): SingleSerie
  frequencyDistribution(from: Date!, till: Date!): Serie
  lagsDistribution(from: Date!, till: Date!): Serie
  intersectionDistribution(direction: Direction!, from: Date!, till: Date!): [Intersection]
}

type Serie {
  labels: [String]
  values: [[Int]]
}

type SingleSerie {
  labels: [String]
  values: [Int]
}

type Summary implements INode {
  id: ID!
  kind: SummaryKind!
  value: Int!
}

enum SummaryKind {
  IN
  OUT
  CROSS
  PASSENGERS
}

"""
The `Upload` scalar type represents a file upload promise that resolves an
object containing `stream`, `filename`, `mimetype` and `encoding`.
"""
scalar Upload

